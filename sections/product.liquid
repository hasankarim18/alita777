{%- liquid
  assign current_variant = product.selected_or_first_available_variant
-%}

<div>
  <div class="max-w-7xl mx-auto my-0 relative">
    <h1>Product.liquid</h1>
    <hr>
    <div class="grid grid-cols-1 md:grid-cols-2 gap-5  ">
      <div>
        {% render 'product-media', product: product %}
      </div>
      {% comment %} product info {% endcomment %}
      <div class="relative">
        <div style="height: fit-content;" class=" top-5 p-2 ">
          {% form 'product', product, id: 'product-form-one', novalidate: 'novalidate' %}
            {% comment %} vendor {% endcomment %}
            <input type="hidden" name="id" value="{{ current_variant.id  }}">
            {% for block in section.blocks %}
              {% case block.type %}
                {% when 'vendor' %}
                  {% render 'product-vendor-1', product: product %}
                {% when 'product_title' %}
                  {% render 'product-title-1', product: product %}
                {% when 'price' %}
                  {% render 'product-price-1', current_variant: current_variant %}
                {% when 'description' %}
                  {% render 'product-description-1', product: product %}
                {% when 'variant_selector_all' %}
                  {% render 'product-variant-selector-all-1', product: product %}
                {% when 'quantity' %}
                  {% comment %} Quantity {% endcomment %}
                  <div class="my-3">
                    <label for="quantity-{{ section.id }}">Quantity</label>
                    <div class="my-2">
                      <input
                        class="w-full border px-3 py-3"
                        type="number"
                        name="quantity"
                        id="quantity-{{ section.id }}"
                        value="1"
                        min="1"
                      >
                    </div>
                  </div>

                {% when 'separate_select' %}
                  {% comment %} variant selector separate select variant_selector_separate_select {% endcomment %}
                  <variant-selector-one data-url="{{ product.url }}" data-section="{{ section.id }}" class="my-3">
                    <h2>Variant Selector Separate Select</h2>
                    {% unless product.has_only_default_variant %}
                      <div data-url="{{ product.url }}" data-section{{ section.id }}>
                        {%- for option in product.options_with_values -%}
                          <label for="option-{{ section.id}}-{{ forloop.index0 }}"> {{ option.name }} </label>
                          <div class="my-2">
                            <select
                              class="w-full border p-4 "
                              name="options[{{ option.name |  escape }}]"
                              id="option-{{ section.id}}-{{ forloop.index0 }}"
                            >
                              {% for value in option.values %}
                                <option
                                  {% if option.selected_value == value %}
                                    selected
                                  {% endif %}
                                  value="{{ value }}"
                                >
                                  {{ value }}
                                </option>
                              {% endfor %}
                            </select>
                          </div>
                          {% comment %} #script {% endcomment %}
                          <script type="application/json">
                            {{ product.variants | json }}
                          </script>
                        {%- endfor -%}
                      </div>
                    {% endunless %}
                  </variant-selector-one>
                {% when 'selector_swatch' %}
                  <div>
                    <h2 class="text-2xl">Variant selector swatch</h2>
                  </div>
                {% when 'add_to_cart' %}
                  {% render 'product-add-to-cart-one', section: section, current_variant: current_variant %}
                {% else %}
                  <div>Add Block from customizer</div>
              {% endcase %}
            {% endfor %}

            {% comment %} add to cart button {% endcomment %}
          {% endform %}
        </div>
      </div>
      {% comment %} product info end {% endcomment %}
    </div>
  </div>
</div>

<script>
  document.addEventListener('DOMContentLoaded', function () {
    //---------------------------------------
    class VariantSelector extends HTMLElement {
      // this.options
      // this.currentVariant
      constructor() {
        super();
        this.addEventListener('change', this.onVariantChange);
        this.product_form = document.getElementById('product-form-one');
      }
      onVariantChange() {
        this.getSelectedOptions();
        this.getVariantJson();
        this.getSelectedVaiant();
        if (this.currentVariant) {
          this.updateUrl();
          this.updateFormId();
          this.updatePrice();
        }
      }

      getSelectedOptions() {
        this.options = Array.from(this.querySelectorAll('select'), (select) => {
          return select.value;
        });
        //   console.log(' options', this.options);
      }

      getVariantJson() {
        const scriptTag = this.querySelector('script[type="application/json"]');

        this.variantData = JSON.parse(scriptTag.textContent);

        //  console.log(this.variantData);
        return this.variantData;
      }
      // this function is tuough to understand
      getSelectedVaiant() {
        this.currentVariant = this.getVariantJson().find((variant) => {
          const findings = !variant.options
            .map((option, index) => {
              return this.options[index] === option;
            })
            .includes(false);

          if (findings) {
            return variant;
          }
        });

        //  console.log('currentvariant', this.currentVariant);
      }

      // updateUrl
      updateUrl() {
        if (!this.currentVariant) {
          return;
        }
        window.history.replaceState({}, {}, `${this.dataset.url}?variant=${this.currentVariant.id}`);
      }

      // update form id
      updateFormId() {
        const form = document.getElementById('product-form-one');
        const form_id_input = this.product_form.querySelector('input[name="id"]');
        form_id_input.value = this.currentVariant.id;
        // console.log
        //    console.log('id', idInput);
      }
      // update price
      updatePrice() {
        const url = this.dataset.url;
        fetch(`${url}?variant=${this.currentVariant.id}&section_id=${this.dataset.section}`)
          .then((response) => response.text())
          .then((responseText) => {
            const html = new DOMParser().parseFromString(responseText, 'text/html');

            // price
            const price_id = `price-${this.dataset.section}`;
            const old_prict = this.product_form.querySelector(`#${price_id}`);
            const new_price = html.querySelector(`#${price_id}`);

            if (old_prict && new_price) {
              old_prict.innerHTML = new_price.innerHTML;
            }

            // update add to cart button
            const addToCartId = `addtocart-${this.dataset.section}`;
            // console.log(this.currentVariant.available);
            const addToCartButton = this.product_form.querySelector(`#${addToCartId}`);

            //     const addToCartButton = document.querySelector(`#addtocart-${this.dataset.section}`);

            if (this.currentVariant.available) {
              // ✅ Variant is available — ENABLE button
              addToCartButton.removeAttribute('disabled');
              addToCartButton.removeAttribute('aria-disabled');
              addToCartButton.textContent = 'Add to cart';

              // Add active styles
              addToCartButton.classList.add('bg-gray-900', 'hover:bg-gray-700', 'cursor-pointer');

              // Remove disabled styles
              addToCartButton.classList.remove('bg-gray-400', 'opacity-50', 'cursor-not-allowed');
            } else {
              // ❌ Variant is unavailable — DISABLE button
              addToCartButton.setAttribute('disabled', 'true');
              addToCartButton.setAttribute('aria-disabled', 'true');
              addToCartButton.textContent = 'Sold out';

              // Remove active styles
              addToCartButton.classList.remove('bg-gray-900', 'hover:bg-gray-700', 'cursor-pointer');

              // Add disabled styles
              addToCartButton.classList.add('bg-gray-400', 'opacity-50', 'cursor-not-allowed');
            }
          });

        //        const variant_id = this.currentVariant.id;
      }
    }
    customElements.define('variant-selector-one', VariantSelector);

    ///--------------------------------------------------
  });
</script>

{% schema %}
{
  "name": "Product Template 1",
  "tag": "section",
  "class": "section",
  "settings": [],
  "blocks": [
    {
      "type": "vendor",
      "limit": 1,
      "name": "Prodcut Vendor",
      "settings": []
    },
    {
      "type": "product_title",
      "limit": 1,
      "name": "Product Title",
      "settings": []
    },
    {
      "type": "price",
      "limit": 1,
      "name": "Product Price",
      "settings": []
    },
    {
      "type": "description",
      "limit": 1,
      "name": "Description",
      "settings": []
    },
    {
      "type": "variant_selector_all",
      "limit": 1,
      "name": "Variant Selector All",
      "settings": []
    },
    {
      "type": "separate_select",
      "limit": 1,
      "name": "Separate Select",
      "settings": []
    },
    {
      "type": "selector_swatch",
      "limit": 1,
      "name": "Selector Swatch",
      "settings": []
    },
    {
      "type": "quantity",
      "limit": 1,
      "name": "Quantity",
      "settings": []
    },
    {
      "type": "add_to_cart",
      "limit": 1,
      "name": "Add to Cart",
      "settings": []
    }
  ],
  "presets": [
    {
      "name": "Product Template 1",
      "settings": {}
    }
  ]
}
{% endschema %}
